
import os
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import create_engine, select, asc, desc
from sqlalchemy.orm import sessionmaker

from database.models import Event, Base  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –≤–µ—Ä–Ω–∞—è
from parser.config import CHANNELS       # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ CHANNELS –æ–ø—Ä–µ–¥–µ–ª—ë–Ω

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ –ë–î
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
DB_PATH = os.getenv("DB_PATH", "eventdb.sqlite3")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# SQLAlchemy setup
engine = create_engine(f"sqlite:///{DB_PATH}", echo=False)
Base.metadata.create_all(engine)
SessionLocal = sessionmaker(bind=engine)


# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class FilterStates(StatesGroup):
    cost = State()
    time_willing = State()
    district = State()
    indoor = State()
    paid_sort = State()
    channel = State()


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö")],
        [KeyboardButton(text="üîç –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å")],
    ],
    resize_keyboard=True,
)

cost_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ë–µ—Å–ø–ª–∞—Ç–Ω–æ"), KeyboardButton(text="–ü–ª–∞—Ç–Ω–æ")],
        [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")],
    ],
    resize_keyboard=True,
)

time_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚â§ 1 —á–∞—Å"), KeyboardButton(text="> 1 —á–∞—Å–∞")],
        [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")],
    ],
    resize_keyboard=True,
)

indoor_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–û—Ç–∫—Ä—ã—Ç–æ–µ"), KeyboardButton(text="–ó–∞–∫—Ä—ã—Ç–æ–µ")],
        [KeyboardButton(text="–û–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞"), KeyboardButton(text="–û—Ç–º–µ–Ω–∞")],
    ],
    resize_keyboard=True,
)

paid_sort_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Ü–µ–Ω—ã"), KeyboardButton(text="–ü–æ —É–±—ã–≤–∞–Ω–∏—é —Ü–µ–Ω—ã")],
        [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")],
    ],
    resize_keyboard=True,
)

channel_buttons = [[KeyboardButton(text=ch)] for ch in CHANNELS]
channel_buttons.append([KeyboardButton(text="–í—Å–µ")])
channel_buttons.append([KeyboardButton(text="–û—Ç–º–µ–Ω–∞")])
channel_kb = ReplyKeyboardMarkup(keyboard=channel_buttons, resize_keyboard=True)


@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", reply_markup=main_kb)


@dp.message(F.text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö" or F.text.contains("–ü–æ–∫–∞–∑–∞—Ç—å 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö"))
async def show_latest(message: Message, state: FSMContext):
    session = SessionLocal()
    stmt = select(Event).order_by(desc(Event.date)).limit(5)
    events = session.execute(stmt).scalars().all()
    session.close()

    if not events:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.", reply_markup=main_kb)
        return

    for ev in events:
        price_text = "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ" if not ev.price or ev.price == 0 else f"–¶–µ–Ω–∞: {ev.price}‚ÇΩ"
        text = (
            f"üé´ <b>{ev.title}</b>\n"
            f"{ev.description or ''}\n"
            f"üìÖ {ev.date}\n"
            f"üìç {ev.location}\n"
            f"{price_text}\n"
            f"{'–û—Ç–∫—Ä—ã—Ç–æ–µ' if ev.is_outdoor else '–ó–∞–∫—Ä—ã—Ç–æ–µ'}\n"
            f"–ò—Å—Ç–æ—á–Ω–∏–∫: {ev.source_channel or '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n"
        )
        await message.answer(text, parse_mode="HTML")

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", reply_markup=main_kb)


@dp.message(F.text == "üîç –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å")
async def start_filter(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=cost_kb)
    await state.set_state(FilterStates.cost)


@dp.message(FilterStates.cost)
async def filter_cost(message: Message, state: FSMContext):
    if message.text not in ["–ë–µ—Å–ø–ª–∞—Ç–Ω–æ", "–ü–ª–∞—Ç–Ω–æ", "–û—Ç–º–µ–Ω–∞"]:
        return await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", reply_markup=cost_kb)
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_kb)
    await state.update_data(cost=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–∏?", reply_markup=time_kb)
    await state.set_state(FilterStates.time_willing)


@dp.message(FilterStates.time_willing)
async def filter_time(message: Message, state: FSMContext):
    if message.text not in ["‚â§ 1 —á–∞—Å", "> 1 —á–∞—Å–∞", "–û—Ç–º–µ–Ω–∞"]:
        return await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", reply_markup=time_kb)
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_kb)
    await state.update_data(time_willing=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω (–∏–ª–∏ ¬´–í—Å–µ¬ª):", reply_markup=ReplyKeyboardRemove())
    await state.set_state(FilterStates.district)


@dp.message(FilterStates.district)
async def filter_district(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_kb)
    await state.update_data(district=None if message.text.lower() == "–≤—Å–µ" else message.text.strip())
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è:", reply_markup=indoor_kb)
    await state.set_state(FilterStates.indoor)


@dp.message(FilterStates.indoor)
async def filter_indoor(message: Message, state: FSMContext):
    if message.text not in ["–û—Ç–∫—Ä—ã—Ç–æ–µ", "–ó–∞–∫—Ä—ã—Ç–æ–µ", "–û–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞", "–û—Ç–º–µ–Ω–∞"]:
        return await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", reply_markup=indoor_kb)
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_kb)
    await state.update_data(indoor=message.text)
    data = await state.get_data()
    if data["cost"] == "–ü–ª–∞—Ç–Ω–æ":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ —Ü–µ–Ω–µ:", reply_markup=paid_sort_kb)
        await state.set_state(FilterStates.paid_sort)
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:", reply_markup=channel_kb)
        await state.set_state(FilterStates.channel)


@dp.message(FilterStates.paid_sort)
async def filter_paid_sort(message: Message, state: FSMContext):
    if message.text not in ["–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Ü–µ–Ω—ã", "–ü–æ —É–±—ã–≤–∞–Ω–∏—é —Ü–µ–Ω—ã", "–û—Ç–º–µ–Ω–∞"]:
        return await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", reply_markup=paid_sort_kb)
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_kb)
    await state.update_data(paid_sort=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:", reply_markup=channel_kb)
    await state.set_state(FilterStates.channel)


@dp.message(FilterStates.channel)
async def filter_channel(message: Message, state: FSMContext):
    if message.text not in CHANNELS + ["–í—Å–µ", "–û—Ç–º–µ–Ω–∞"]:
        return await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", reply_markup=channel_kb)
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_kb)

    data = await state.get_data()
    cost = data["cost"]
    time_willing = data["time_willing"]
    district = data.get("district")
    indoor = data["indoor"]
    paid_sort = data.get("paid_sort")
    selected_channel = message.text

    stmt = select(Event)
    if cost == "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ":
        stmt = stmt.where((Event.price == None) | (Event.price == 0))
    else:
        stmt = stmt.where(Event.price > 0)
        if paid_sort == "–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Ü–µ–Ω—ã":
            stmt = stmt.order_by(asc(Event.price))
        elif paid_sort == "–ü–æ —É–±—ã–≤–∞–Ω–∏—é —Ü–µ–Ω—ã":
            stmt = stmt.order_by(desc(Event.price))

    if time_willing == "‚â§ 1 —á–∞—Å":
        stmt = stmt.where(Event.duration_minutes <= 60)
    else:
        stmt = stmt.where(Event.duration_minutes > 60)

    if district:
        stmt = stmt.where(Event.district.ilike(f"%{district}%"))

    if indoor == "–û—Ç–∫—Ä—ã—Ç–æ–µ":
        stmt = stmt.where(Event.is_outdoor.is_(True))
    elif indoor == "–ó–∞–∫—Ä—ã—Ç–æ–µ":
        stmt = stmt.where(Event.is_outdoor.is_(False))

    if selected_channel != "–í—Å–µ":
        stmt = stmt.where(Event.source_channel == selected_channel)

    if not (cost == "–ü–ª–∞—Ç–Ω–æ" and paid_sort):
        stmt = stmt.order_by(desc(Event.date))

    stmt = stmt.limit(5)
    session = SessionLocal()
    events = session.execute(stmt).scalars().all()
    session.close()

    if not events:
        await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_kb)
        await state.clear()
        return

    for ev in events:
        price_text = "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ" if not ev.price or ev.price == 0 else f"–¶–µ–Ω–∞: {ev.price}‚ÇΩ"
        text = (
            f"üé´ <b>{ev.title}</b>\n"
            f"{ev.description or ''}\n"
            f"üìÖ {ev.date}\n"
            f"üìç {ev.location}\n"
            f"{price_text}\n"
            f"{'–û—Ç–∫—Ä—ã—Ç–æ–µ' if ev.is_outdoor else '–ó–∞–∫—Ä—ã—Ç–æ–µ'}\n"
            f"–ò—Å—Ç–æ—á–Ω–∏–∫: {ev.source_channel or '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n"
        )
        await message.answer(text, parse_mode="HTML")

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", reply_markup=main_kb)
    await state.clear()


if __name__ == "__main__":
    dp.run_polling(bot)